{"version":3,"sources":["components/wrapper/wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","App","state","basketcards","score","highscore","handleIncorrect","_this","setState","console","log","this","alert","concat","forEach","basketcard","count","handleCorrect","id","find","o","i","sort","Math","random","_this2","wrapper_wrapper","map","clickCount","handlecorrect","key","image","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2hDAIeA,SAFC,SAAAC,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,YC2D1CC,0NAtDfC,MAAQ,CACNC,cACAC,MAAO,EACPC,UAAW,KAEbC,gBAAkB,WAYlB,OAXMC,EAAKL,MAAME,MAAQG,EAAKL,MAAMG,WAChCE,EAAKC,SAAS,CAACH,UAAWE,EAAKL,MAAME,OAAQ,WAC3CK,QAAQC,IAAIC,KAAKT,MAAMG,WACvBO,MAAK,kBAAAC,OAAmBF,KAAKT,MAAME,QACnCO,KAAKH,SAAS,CAACJ,MAAO,MAG5BG,EAAKL,MAAMC,YAAYW,QAAQ,SAAAC,GAC7BA,EAAWC,MAAQ,IAErBJ,MAAK,mBAAAC,OAAoBN,EAAKL,MAAME,SAC7B,KAGPa,cAAgB,SAAAC,GAEdX,EAAKL,MAAMC,YAAYgB,KAAK,SAACC,EAAGC,GAC9B,GAAID,EAAEF,KAAOA,EAAI,CACf,GAA4B,IAAzBf,EAAYkB,GAAGL,MAMhB,OALAb,EAAYkB,GAAGL,MAAQb,EAAYkB,GAAGL,MAAQ,EAC9CT,EAAKC,SAAS,CAACJ,MAAOG,EAAKL,MAAME,MAAQ,GAAI,WAC3CK,QAAQC,IAAIC,KAAKT,MAAME,SAEzBG,EAAKL,MAAMC,YAAYmB,KAAK,kBAAMC,KAAKC,SAAW,MAC3C,EACAjB,EAAKD,8FAMT,IAAAmB,EAAAd,KACP,OACEf,EAAAC,EAAAC,cAAC4B,EAAD,KAELf,KAAKT,MAAMC,YAAYwB,IAAI,SAAAZ,GAAU,OACpCnB,EAAAC,EAAAC,cAAA,QACE8B,WAAYH,EAAKI,cACjBX,GAAIH,EAAWG,GACfY,IAAKf,EAAWG,GAChBa,MAAOhB,EAAWgB,kBA/CJC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.21749259.chunk.js","sourcesContent":["import React from 'react';\r\nimport './wrapper.css';\r\nconst Wrapper = props => <div className='wrapper'>{props.children}\r\n</div>;\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport basketcards from './basketcards.json';\nimport Wrapper from './components/wrapper/wrapper'\nimport './App.css';\nimport Card from \"./components/card/card\";\n\nclass App extends Component {\nstate = {\n  basketcards,\n  score: 0,\n  highscore: 0\n};\nhandleIncorrect = () => {\n  if (this.state.score > this.state.highscore) {\n    this.setState({highscore: this.state.score}, function() {\n      console.log(this.state.highscore);\n      alert(`new highscore: ${this.state.score}`);\n      this.setState({score: 0});\n    });\n  }\nthis.state.basketcards.forEach(basketcard => {\n  basketcard.count = 0;\n});\nalert(`your score was: ${this.state.score}`);\nreturn true;\n}\n\nhandleCorrect = id => {\n  // eslint-disable-next-line array-callback-return\n  this.state.basketcards.find((o, i) => {\n    if (o.id === id) {\n      if(basketcards[i].count === 0){\n        basketcards[i].count = basketcards[i].count + 1;\n        this.setState({score: this.state.score + 1}, function(){\n          console.log(this.state.score);\n        });\n        this.state.basketcards.sort(() => Math.random() - 0.5)\n        return true;\n      } else { this.handleIncorrect();\n      }\n    }\n  });\n}\n\n  render() {\n    return (\n      <Wrapper>\n\n{this.state.basketcards.map(basketcard => (\n  <card \n    clickCount={this.handlecorrect}\n    id={basketcard.id}\n    key={basketcard.id}\n    image={basketcard.image}\n    />\n))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}